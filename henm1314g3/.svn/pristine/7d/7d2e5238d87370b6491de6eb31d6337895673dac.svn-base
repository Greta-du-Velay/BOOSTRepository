<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    
    <ModulePrefs title="Boost Progress"
		description="This widget gives an overview of the learning process.."
		author="Team Boost"
		author_email="henm1314g3@dbis.rwth-aachen.de"
		height="400"
		>
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp"                     
		    xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/" 
		    openapp:service="http://purl.org/role/terms/spaceService"
		    openapp:permitReadAppend="http://purl.org/role/terms/data">
			
		    <Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
    </ModulePrefs>
    
    <Content type="html">
    <![CDATA[
		
		<!-- We use jQuery to manipulate DOM and jQuery-UI for the interface. -->
    	<script src="http://127.0.0.1:8073/role/henm1314g3/js/jquery-1.10.2.min.js" type="text/javascript"></script>
    	<script src="http://127.0.0.1:8073/role/henm1314g3/js/bootstrap.min.js" type="text/javascript"></script>
    	<script src="http://dbis.rwth-aachen.de/gadgets/iwc/lib/iwc.js"></script>

	<script src="http://127.0.0.1:8073/role/henm1314g3/js/EmployeeManager.js" type="text/javascript"></script>
	<script src="http://127.0.0.1:8073/role/henm1314g3/js/BCNManager.js" type="text/javascript"></script>
		
	<script src="http://127.0.0.1:8073/role/henm1314g3/highcharts/js/highcharts.js" type="text/javascript"></script>
	<script src="http://127.0.0.1:8073/role/henm1314g3/highcharts/js/modules/exporting.js" type="text/javascript"></script>

		<!-- Define CSS -->		
		<link href="http://127.0.0.1:8073/role/henm1314g3/css/bootstrap.min.css" rel="stylesheet">

		<!-- JavaScript Block -->
		<script>
			var color1 = '#428BCA';
			var color2 = '#f5f5f5';
			var iwcClient;
			var employees;
			var bcns;
			var space;
			var check=false;
				
			//Those boolean tell us if we are currently displaying a BCN or Employee graph.
			var isOverviewGraph={};
			var isBcnGraph={};
			var isEmployeeGraph={};
			
			gadgets.util.registerOnLoadHandler(init);
			
			function init(){
				space = new openapp.oo.Resource(openapp.param.space());
				iwcClient = new iwc.Client();
				iwcClient.connect(iwcCallback);
				retrieveAllBcns(space, function(bcnsList){
					bcns=bcnsList;
					bcns.sort(function(a, b){if(a.name < b.name) return -1; else return 1;});
					
					retrieveAllEmployees(space, function(employeesList){
					employees=employeesList;
					employees.sort(function(a, b){if(a.name < b.name) return -1; else return 1;});
					
					isBcnGraph.bool=false;
					isEmployeeGraph.bool=false;
					isOverviewGraph.bool=false;
					check=true;
					console.log('Widget "Boost Progress" loaded.');

					showDefaultGraph();
					});				
				});
			}

			function iwcCallback(intent){
				if (!check){
					return;
				}
				//isnt it better this??
				//while(!check){}
				
				if (intent.action == "SHOW_BCN_PROGRESS"){
					isBcnGraph.bool=true;
					isOverviewGraph.bool=false;
					isEmployeeGraph.bool=false;
					isBcnGraph.uri=intent.data;
					showBcnGraph(intent.data);
				}
				if (intent.action == "SHOW_EMPLOYEE_PROGRESS"){				
					isBcnGraph.bool=false;
					isOverviewGraph.bool=false;
					isEmployeeGraph.bool=true;
					isEmployeeGraph.uri=intent.data;
					showEmployeeGraph(intent.data);
				}
				if(intent.action == "BCN_CREATE"){
					createBCNfromUri(intent.data, function(bcn){
						bcns.push(bcn);
						bcns.sort(function(a, b){if(a.name.toLowerCase() < b.name.toLowerCase()) 
								return -1; else return 1;});

						if (isEmployeeGraph.bool){
							showEmployeeGraph(isEmployeeGraph.uri);
						}
						if(isOverviewGraph.bool){
							showDefaultGraph();
						}
					});
				}

				if(intent.action == "BCN_UPDATE"){
					createBCNfromUri(intent.data, function(updatedBcn){
						for(var i = 0; i < bcns.length; i++){
							var bcn = bcns[i];
							if(bcn.uri == intent.data)
								bcns[i] = updatedBcn;
						}
					});
					if (isBcnGraph.bool && isBcnGraph.uri==intent.data){
						showBcnGraph(isBcnGraph.uri);
					}
					if (isEmployeeGraph.bool){
						showEmployeeGraph(isEmployeeGraph.uri);
					}
					if (isOverviewGraph.bool){
						showDefaultGraph();
					}
				}

				if(intent.action == "BCN_DELETE"){
					for(var i = 0; i < bcns.length; i++){
						var bcn = bcns[i];
						if(bcn.uri == intent.data)
							bcns.splice(i, 1);
					}
					if (isBcnGraph.bool && isBcnGraph.uri==intent.data){
						showDefaultGraph();
					}
					if (isEmployeeGraph.bool){
						showEmployeeGraph(isEmployeeGraph.uri);
					}
					if (isOverviewGraph.bool){
						showDefaultGraph();
					}
				}

				if(intent.action == "EMPLOYEE_CREATE"){
					createEmployeefromUri(intent.data, function(bcn){
						employees.push(bcn);
						employees.sort(function(a, b){if(a.name.toLowerCase() < b.name.toLowerCase()) 
								return -1; else return 1;});
						if (isBcnGraph.bool){
							showBcnGraph(isBcnGraph.uri);
						}
						if (isOverviewGraph.bool){
							showDefaultGraph();
						}
					});
				}

				if(intent.action == "EMPLOYEE_UPDATE"){
					createEmployeefromUri(intent.data, function(updatedEmployee){
						for(var i = 0; i < employees.length; i++){
							var employee = employees[i];
							if(employee.uri == intent.data)
								employees[i] = updatedEmployee;
						}
						if (isBcnGraph.bool){	
							showBcnGraph(isBcnGraph.uri);
						}
						if (isEmployeeGraph.bool && isEmployeeGraph.uri==intent.data){	
							showEmployeeGraph(isEmployeeGraph.uri);
						}
						if (isOverviewGraph.bool)
							showDefaultGraph();
					});
				}

				if(intent.action == "EMPLOYEE_DELETE"){
					for(var i = 0; i < employees.length; i++){
						var employee = employees[i];
						if(employee.uri == intent.data)
							employees.splice(i, 1);
					}
					if (isBcnGraph.bool){
						showBcnGraph(isBcnGraph.uri);
					}
					if (isEmployeeGraph.bool && isEmployeeGraph.uri==intent.data){
						showDefaultGraph();
					}
					if (isOverviewGraph.bool){
						showDefaultGraph();
					}
				}
			}

			function averageLIProgressForBcn(bcn){
				var liNameList=[];
				var liStartListAvg=[];
				var liCurrentListAvg=[];
				var liEndListAvg=[];
				for(var j = 0; j<bcn.learningIndicators.length; j++){
					var liStartList=[];
					var liCurrentList=[];
					var liEndList=[];
					var cont=0;
					var li = bcn.learningIndicators[j];
					liNameList.push(li.name);
					for(i=0; i<employees.length; i++){
						var employee = employees[i];
						var start = employee.learningLevels[bcn.uri][li.id].start;
						var current = employee.learningLevels[bcn.uri][li.id].current;
						var end = employee.learningLevels[bcn.uri][li.id].end;	
						if (employee.learningLevels[bcn.uri].isRelevant){
							liStartList.push(start);
							liCurrentList.push(current);
							liEndList.push(end);
							cont++;
						}
					}
					if (cont>0){
						var sumStart = liStartList.reduce(function(a, b) { return a + b });
						var sumCurrent = liCurrentList.reduce(function(a, b) { return a + b });
						var sumEnd = liEndList.reduce(function(a, b) { return a + b });
						liStartListAvg.push(sumStart / liStartList.length);
						liCurrentListAvg.push(sumCurrent / liCurrentList.length);
						liEndListAvg.push(sumEnd / liEndList.length);
					}
					else{
						liStartListAvg.push(0);
						liCurrentListAvg.push(0);
						liEndListAvg.push(0);
					}
				}
				var solution=[];
				solution[0]=[];
				solution[1]=[];
				for (var i=0; i<liStartListAvg.length; i++){
					solution[0][i]= [liNameList[i], liEndListAvg[i]];
					solution[1][i] = [liNameList[i], liStartListAvg[i]];
				}
				return solution;
			}
			
			function averageBcnProgressForEmployee(employee){
				var liNameList=[];
				var liStartListAvg=[];
				var liCurrentListAvg=[];
				var liEndListAvg=[];
				for(i=0; i<bcns.length; i++){
					var bcn = bcns[i];
					var liStartList=[];
					var liCurrentList=[];
					var liEndList=[];
					var cont=0;
					for(var j = 0; j<bcn.learningIndicators.length; j++){
						var li = bcn.learningIndicators[j];
						var start = employee.learningLevels[bcn.uri][li.id].start;
						var current = employee.learningLevels[bcn.uri][li.id].current;
						var end = employee.learningLevels[bcn.uri][li.id].end;
						if (employee.learningLevels[bcn.uri].isRelevant){
							liStartList.push(start);
							liCurrentList.push(current);
							liEndList.push(end);
							cont++;
						}
					}
					
					if (cont>0){
						liNameList.push(bcn.name);
						var sumStart = liStartList.reduce(function(a, b) { return a + b });
						var sumCurrent = liCurrentList.reduce(function(a, b) { return a + b });
						var sumEnd = liEndList.reduce(function(a, b) { return a + b });
						liStartListAvg.push(sumStart / liStartList.length);
						liCurrentListAvg.push(sumCurrent / liCurrentList.length);
						liEndListAvg.push(sumEnd / liEndList.length);
					}
				}
				var solution=[];
				solution[0]=[];
				solution[1]=[];
				for (var i=0; i<liStartListAvg.length; i++){
					solution[0][i]= [liNameList[i], liEndListAvg[i]];
					solution[1][i] = [liNameList[i], liStartListAvg[i]];
				}
				return solution;
			}
			// Printing the graphs
			
			function printGraph(isDefault, title, subtitle, uriList, liNameList, formater, liStartListAvg, liCurrentListAvg, liEndListAvg){
				var learningLevelsName = [];
				for (var i=0; i<llevel.length; i++)
					learningLevelsName.push(llevel[i]);
				for (var i=0; i<liEndListAvg.length; i++){
					liEndListAvg[i] = liEndListAvg[i]-liStartListAvg[i];
				}
				for(var i = 0; i < liStartListAvg.length; i++){
					liStartListAvg[i] = {y: liStartListAvg[i], color:color1};
				}
				for(var i = 0; i < liEndListAvg.length; i++){
					liEndListAvg[i] = {y: liEndListAvg[i], color:color2};
				}
				if (isDefault.bool && isDefault.bcn){
					$('#container').highcharts({
						chart: {
							type: 'column',
						},
						legend: {
							enabled: false
						},

						title: {
							text: title,
							style: {
										
							},
							useHTML: true
						},
						subtitle: {
							text: subtitle
						},
						xAxis: {
							type: 'category',
							categories: liNameList,
							labels:{
								rotation: -25,
								formatter: function() {
									return formater+this.value;
								},
								useHTML:true
							}
						},
						
						yAxis: {
							endOnTick: true,
							tickmarkPlacement:'on',
							max: learningLevelsName.length-1,
							categories: learningLevelsName,
							title: {
								text: 'Learning Levels'
							}
						},
						tooltip: {
							enabled: false,
						},
						plotOptions: {
							series: {
								shadow:true,
								borderColor: '#303030'
							},
							column: {
								states:{
									hover:{enabled:false}
								},

								stacking: 'normal',
								pointPadding: 0.2,
								allowPointSelect: true,
								cursor: 'pointer',
								point: {
									events: {
										click: function(event) {
											for (var i=0; i<liNameList.length; i++){
												if (bcns[i].name==liNameList[this.x])
													showBcnGraph(bcns[this.x].uri);
											}
										}
									}
								}
							}
						},
						series: [{
							name: 'End',
							data: liEndListAvg,
							uri: uriList,	

						}, {
							name: 'Current',
							data: liStartListAvg,
							uri: uriList,
						}],
					});
				}
//---------------------------------------------------------------------------------------------------------------				
				else{
						$('#container').highcharts({
						chart: {
							type: 'column',
							events: {
								click: function () {
									showDefaultGraph();
								}
							}
						},
						legend: {
							enabled: false
						},

						title: {
							text: title,
							style: {
										
							},
							useHTML: true
						},
						subtitle: {
							text: subtitle
						},
						xAxis: {
							type: 'category',
							categories: liNameList,
							labels:{
								rotation: -25,
								formatter: function() {
									return formater+this.value;
								},
								useHTML:true
							}
						},
						
						yAxis: {
							endOnTick: true,
							tickmarkPlacement:'on',
							max: learningLevelsName.length-1,
							categories: learningLevelsName,
							title: {
								text: 'Learning Levels'
							}
						},
						tooltip: {
							enabled: false,
						},
						plotOptions: {
							series: {
								shadow:true,
								borderColor: '#303030'
							},
							column: {
								states:{
									hover:{enabled:false}
								},
								stacking: 'normal',
								pointPadding: 0.2,
								allowPointSelect: true,
								cursor: 'pointer',
								//point: {
									//events: {
										//click: function(event) {
											//for (var i=0; i<liNameList.length; i++){
												//if (bcns[i].name==liNameList[this.x])
													//showBcnGraph(bcns[this.x].uri);
											//}
										//}
									//}
								//}
							}
						},
						series: [{
							name: 'End',
							data: liEndListAvg,
						}, {
							name: 'Current',
							data: liStartListAvg,
						}],
					});
				}
			}
			
			function showDefaultGraph(){
				isOverviewGraph.bool=true;
				isBcnGraph.bool=false;
				isEmployeeGraph.bool=false;
				
				var liStartListAvgTotal=[];
				var liCurrentListAvgTotal=[];
				var liEndListAvgTotal=[];
				
				var liNameList=[];
				for(var i=0; i<bcns.length; i++){
					var liStartListAvg=[];
					var liCurrentListAvg=[];
					var liEndListAvg=[];
					var bcn = bcns[i];
					liNameList.push(bcn.name);
					for(var j = 0; j<bcn.learningIndicators.length; j++){
						var liStartList=[];
						var liCurrentList=[];
						var liEndList=[];
						var li = bcn.learningIndicators[j];
						var cont=0;
						for (var k = 0; k<employees.length; k++){
							var employee = employees[k];
							var start = employee.learningLevels[bcn.uri][li.id].start;
							var current = employee.learningLevels[bcn.uri][li.id].current;
							var end = employee.learningLevels[bcn.uri][li.id].end;
							if (employee.learningLevels[bcn.uri].isRelevant){
								liStartList.push(start);
								liCurrentList.push(current);
								liEndList.push(end);
								cont++;
							}
						}
						if (cont>0){
							var sumStart = liStartList.reduce(function(a, b) { return a + b });
							var sumCurrent = liCurrentList.reduce(function(a, b) { return a + b });
							var sumEnd = liEndList.reduce(function(a, b) { return a + b });
							liStartListAvg.push(sumStart / liStartList.length);
							liCurrentListAvg.push(sumCurrent / liCurrentList.length);
							liEndListAvg.push(sumEnd / liEndList.length);
						}
					}
					var sumStart = liStartListAvg.reduce(function(a, b) { return a + b });
					var sumCurrent = liCurrentListAvg.reduce(function(a, b) { return a + b });
					var sumEnd = liEndListAvg.reduce(function(a, b) { return a + b });
					liStartListAvgTotal.push(sumStart / liStartListAvg.length);
					liCurrentListAvgTotal.push(sumCurrent / liCurrentListAvg.length);
					liEndListAvgTotal.push(sumEnd / liEndListAvg.length);	
				}
				var uriBcn=[];
				for (var i=0; i<bcns.length; i++)
					uriBcn[i]=bcns[i].uri;
				var title= 'Overall View';
				var subtitle = 'How close you are to accomplish your goals';
				var isDefault={};
				isDefault.bool=true;
				isDefault.bcn=true;
				var formater='<span class="glyphicon glyphicon-star" style:"margin-right: 5px;"></span>';
				printGraph(isDefault, title, subtitle, uriBcn, liNameList, formater, liStartListAvgTotal, liCurrentListAvgTotal, liEndListAvgTotal);
			}
			
			function showBcnGraph(bcnUri){
				var bcn;				
				for(t=0; t<bcns.length; t++){
					if (bcns[t].uri == bcnUri)
						bcn=bcns[t];
				}
				var data = averageLIProgressForBcn(bcn);
				var liEndListAvg=[];
				var liCurrentListAvg=[];
				var liStartListAvg=[];
				var liNameList=[];
				for (var i=0; i<data[0].length; i++){
					liEndListAvg[i]=data[0][i][1];
					liStartListAvg[i]=data[1][i][1];
					liNameList[i]=data[0][i][0];
				}
				var title= '<span class="glyphicon glyphicon-star" style:"margin-right: 5px;"></span>'+bcn.name+'';
				var subtitle='Taking the average employees';
				var isDefault={};
				isDefault.bool=false;
				isDefault.bcn=false;
				var uriList=[];
				var formater='<span class="glyphicon glyphicon-star" style:"margin-right: 5px;"></span>';
				printGraph(isDefault, title, subtitle, uriList, liNameList, formater, liStartListAvg, liCurrentListAvg, liEndListAvg);
			}

			function showEmployeeGraph(employeeUri){
				var employee;				
				for(t=0; t<employees.length; t++){
					if (employees[t].uri == employeeUri)
						employee=employees[t];
				}
				var data = averageBcnProgressForEmployee(employee);
				
				var liEndListAvg=[];
				var liCurrentListAvg=[];
				var liStartListAvg=[];
				var liNameList=[];
				for (var i=0; i<data[0].length; i++){
					liEndListAvg[i]=data[0][i][1];
					liStartListAvg[i]=data[1][i][1];
					liNameList[i]=data[0][i][0];
				}
				var title= '<span class="glyphicon glyphicon-user" style:"margin-right: 5px;"></span>'+employee.name+'';
				var subtitle='Average for goals';
				var isDefault={};
				isDefault.bool=false;
				isDefault.bcn=false;
				var uriList=[];
				var formater='<span class="glyphicon glyphicon-star" style:"margin-right: 5px;"></span>';
				printGraph(isDefault, title, subtitle, uriList, liNameList, formater, liStartListAvg, liCurrentListAvg, liEndListAvg);
			}

		/*
			var employee = employees[evt.target.employee];
				var bcn = bcns[evt.target.bcn];
				var liStartList=[];
				var liCurrentList=[];
				var liEndList=[];
				var liNameList=[];
				for(var j = 0; j<bcn.learningIndicators.length; j++){
					var li = bcn.learningIndicators[j];
					var start = employee.learningLevels[bcn.uri][li.id].start;
					var current = employee.learningLevels[bcn.uri][li.id].current;
					var end = employee.learningLevels[bcn.uri][li.id].end;
					liNameList.push(li.name);
					liStartList.push(start+1);
					liCurrentList.push(current+1);
					liEndList.push(end+1);
				}
				var list = liStartList.concat(liCurrentList, liEndList);
				var learningLevelsName = [""];
				for (var i=0; i<llevel.length; i++)
					learningLevelsName.push(llevel[i]);
					 $('#container').highcharts({
						chart: {
							type: 'column'
						},
						title: {
							text: 'Goal: '+bcn.name+''
						},
						subtitle: {
							text: 'Employee: '+employee.name+''
						},
						xAxis: {
							categories: liNameList
						},
						yAxis: {
							endOnTick: false,
							categories: learningLevelsName,
							title: {
								text: 'Learning Levels'
							}
						},
						tooltip: {
							enabled: false,
						},
						plotOptions: {
							column: {
								pointPadding: 0.2,
								borderWidth: 0
							}
						},
						series: [{
							name: 'Current',
							data: liStartList

						}, {
							name: 'End',
							data: liEndList

						}]
					});
					document.getElementById('btn').style.visibility='visible';
			}
		*/

		</script>

		<!-- HTML Block -->
		<div style="overflow-y: scroll; height: 400px;">
		<div class="panel panel-primary" style="margin-bottom: 0px">
			<div class="panel-heading">
		    	<h3 class="panel-title"><span class="glyphicon glyphicon-stats" style="margin-right:5px;"></span>Your progress</h3>
		  	</div>
		  	<div class="panel-body">
				<div id="container" style="min-height: 355px;">
			</div>
			</div>
		</div>
		</div>
	]]>
  </Content>
</Module>
