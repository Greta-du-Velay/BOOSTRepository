<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    
    <ModulePrefs title="Manage BCNs"
		description="Widget to manage BCNs."
		author="Team Boost"
		author_email="henm1314g3@dbis.rwth-aachen.de"
		height="400">
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp"                     
		    xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/" 
		    openapp:service="http://purl.org/role/terms/spaceService"
		    openapp:permitReadAppend="http://purl.org/role/terms/data">
			
		    <Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
    </ModulePrefs>
    
    <Content type="html">
    <![CDATA[
		
		<!-- We use jQuery to manipulate DOM and jQuery-UI for the interface. -->
    	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js" type="text/javascript"></script>
		<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" type="text/javascript"></script>

		<!-- Define CSS -->
		<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
		<style>
			#tabs li .ui-icon-close { float: left; margin: 0.4em 0.2em 0 0; cursor: pointer; }
		</style>		
		
		<!-- JavaScript Block -->
		<script>
			var tabTemplate;
			var tabContentTemplate;
			var tabs;
			
			//This jQueryUI function magically creates tabs for us.
			$(function() {
				tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close' role='presentation'>Remove Tab</span></li>"
				tabContentTemplate = "<div style='overflow:scroll; overflow-x:hidden; height:250px'><h1>#bcn_name</h1> <p>#bcn_description</p> <p>#li_list</p></div>"
				//$( "#tabs" ).tabs();
				tabs = $( "#tabs" ).tabs();
			});

			var space;
			var bcnsList = new Array();
			
			gadgets.util.registerOnLoadHandler(init);
			
			function init(){
				
			    console.log("Widget loaded");
				
				/*
					Here we get the space resource.
					It is the top level resource which is shared by all users.
				*/
				space = new openapp.oo.Resource(openapp.param.space());

				/*
					We retrieve all BCNs. They will be stored in the 'bcnsList' array.
				*/
				retrieveAllBcns(
					//This callback will fire after all BCNs are loaded.
					function(){
						//We sort the BCNs based on their name property.
						bcnsList.sort(function(a, b){if(a.name < b.name) return -1; else return 1;});
						//Once the BCNs are loaded and sorted we render all of them in the overview
						renderAllBCNs();
						if(bcnsList.length==0)
							$("#bcns").append("<td>No BCNs defined.</td>");
					}
				);
			}
			
			// This function is used to clear content of textfield or textarea after the
			// content has been submitted
			function clearContents(element) {
			    element.value = '';
			}
			
			function saveBCN(){

				var bcn = {
					"uri":"", //This will be set after the resource for the bcn has been created.
					"name":$("#input_bcn_name").val(),
					"description":$("#input_bcn_description").val(),
					"learningIndicators":[]
				}

				//Fetch LI data
				$("tr[name='li_row']").each(function(){
					var li = {};
					li.id = bcn.learningIndicators.length;
					li.name = $(this).find("input[name='li_name']").val();
					bcn.learningIndicators.push(li);
				})

				//Here we create the resource. The BCN gets stored in the space.
				space.create({
					relation: openapp.ns.role + "data",
					type: "my:ns:bcn",
					representation: bcn, //The representation refers to the object
					callback: function(bcnResource){
						//Now we have an URI for our BCN and we need to update the resource
						bcn.uri = bcnResource.getURI();
						bcnResource.setRepresentation(bcn, "application/json", window.location.reload());
					}
				});
				
				// Clear input fields
				clearContents(input_bcn_name);
				clearContents(input_bcn_description);
			}
			
			

			function retrieveAllBcns(callback){
				space.getSubResources({
					relation: openapp.ns.role + "data",
					type: "my:ns:bcn",
					onAll: function(bcns) {
								/*
									Be careful here. The getRepresentation(...) function runs
									asynchronously. This means that the whole for loop is finished
									before even one BCN has been added to the array. To get informed
									when the array is finished I used this callback mechanism in the
									if block. 
								*/
								if(bcns.length == bcnsList.length)
										callback();
								for(var i = 0; i < bcns.length; i++){
									bcns[i].getRepresentation("rdfjson", function(bcnObject){
									bcnsList.push(bcnObject);
									if(bcns.length == bcnsList.length){
										callback();

									}
									
									});
								}
							}
				});
			}

			function renderAllBCNs(){
				$("#bcns").empty();
				for(var i = 0; i < bcnsList.length; i++){
					renderBCN(bcnsList[i]);
				}
			}
			
			// This function collects all existing BCNs and show them in a drop down list
			function renderBCNDropList(){   
			    var sel = document.getElementById("bcn_select");
			    sel.options.length=0;
			    for(var i = 0; i < bcnsList.length; i++){
			        var option = document.createElement("option");
			        option.text = bcnsList[i].name;
			        sel.add(option, null);
			    }
			}

			function renderBCN(bcn){
					//Here I use jQuery for the DOM manipulation
					//Each BCN is an entry in the table
					var tableRow=$("<tr></tr>");
					
					//Show the BCN name
					tableRow.append("<td>" + bcn.name + "</td>");
					$("#bcns").append(tableRow);

					//Show a button to open the details tab
					var detailsButton = $("<button>Details</button>");
					detailsButton.click(function(){addBcnDetailTab(bcn);});
					tableRow.append($("<td></td>").append(detailsButton));
					
					//Show a button to delete the BCN
					var deleteButton = $("<button>Delete</button>");
					deleteButton.attr("name", "delete_bcn");
					deleteButton.click(function() {openapp.resource.del(bcn.uri, window.location.reload());});
					
					/*
					deleteButton.button({
						icons: {
						primary: "ui-icon-trash"
						},
						text: false
						});
					*/
					tableRow.append($("<td></td>").append(deleteButton));
					
					//Show a button to update the BCN
					var updateButton = $("<button>Update</button>");
					updateButton.attr("name", "update_bcn");
					updateButton.click(function() {addBcnUpdateTab(bcn);});
					//tableRow.append($("<td></td>").append(updateButton));
						
			}

			function addLI(){
				var row = $("<tr name='li_row'></tr>");
				row.append("<td><label for='input_li_name'>LI name:</label></td>");
				row.append("<td><input type='text' name='li_name'/></td>");
				var deleteButton = $("<button>Delete</button>");
				deleteButton.click(function(){row.remove()} );
				row.append(deleteButton);
				$("#addLiRow").before(row);
			}

			function addBcnDetailTab(bcn) {
				
				var label = bcn.name;
				id = "tabs-" + bcn.uri;
				liList = $("<ul></ul>");
				for(var i = 0; i < bcn.learningIndicators.length; i++){
					liList.append("<li>"+bcn.learningIndicators[i].name+"</li>");
				}
				li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) );
				tabContentHtml = tabContentTemplate.replace( /#bcn_name/g, bcn.name).replace( /#bcn_description/g, bcn.description).replace( /#li_list/g, liList.html());
				tabs.find( ".ui-tabs-nav" ).append( li );
				tabs.append( "<div id='" + id + "'><p>" + tabContentHtml + "</p></div>" );
				tabs.tabs( "refresh" );
				tabs.tabs("option","active", -1);
			}
			
			
			function addBcnUpdateTab(bcn) {
				$( "[name='li_row_update']" ).remove();				
				document.getElementById("updateButton").value = bcn.uri;				
				document.getElementById("input_bcn_name_update").value = bcn.name;
				document.getElementById("input_bcn_description_update").value = bcn.description;
				
				for(var i = 0; i < bcn.learningIndicators.length; i++){					
					addLIUpdate();
					$( "[name='li_name_update']:last" ).val(bcn.learningIndicators[i].name);
				}
				tabs.tabs("option","active", 2);				
			}
		
			function updateBCN() {
				var id = $( "#updateButton").val();
				openapp.resource.del(id, function(){});
				var bcn = {
					"uri":"", //This will be set after the resource for the bcn has been created.
					"name":$("#input_bcn_name_update").val(),
					"description":$("#input_bcn_description_update").val(),
					"learningIndicators":[]
				}

				//Fetch LI data
				$("tr[name='li_row_update']").each(function(){
					var li = {};
					li.id = bcn.learningIndicators.length;
					li.name = $(this).find("input[name='li_name_update']").val();
					bcn.learningIndicators.push(li);
				})

				//Here we create the resource. The BCN gets stored in the space.
				space.create({
					relation: openapp.ns.role + "data",
					type: "my:ns:bcn",
					representation: bcn, //The representation refers to the object
					callback: function(bcnResource){
						//Now we have an URI for our BCN and we need to update the resource
						bcn.uri = bcnResource.getURI();
						bcnResource.setRepresentation(bcn, "application/json", window.location.reload());
					}
				});
				
				// Clear input fields
				clearContents(input_bcn_name_update);
				clearContents(input_bcn_description_update);
				
			}
			
			function addLIUpdate(){
				var row = $("<tr name='li_row_update'></tr>");
				row.append("<td><label for='input_li_name_update'>LI name:</label></td>");
				row.append("<td><input type='text' name='li_name_update'/></td>");
				var deleteButton = $("<button>Delete</button>");
				deleteButton.click(function(){row.remove()} );
				row.append(deleteButton);
				$("#addLiRowUpdate").before(row);
			}
			

			 $(function(){tabs.delegate( "span.ui-icon-close", "click", function() {
				var panelId = $( this ).closest( "li" ).remove().attr( "aria-controls" );
				$( "#" + panelId ).remove();
				tabs.tabs( "refresh" );
				});})

		</script>
		
		<!-- HTML Block -->

		<div id="tabs">
			<ul>
				<li><a href="#tabs-1">Overview</a></li>
				<li><a href="#tabs-2">Create BCN</a></li>
				<!-- <li><a href="#tabs-3">Update BCN</a></li> -->
			</ul>

			<div id="tabs-1">
				<table id="bcns">
					<td>Loading BCNs...</td>
				</table>
			</div>
		
			<div id="tabs-2">
				<table>
			      <tr>
			        <td><label for="input_bcn_name">Name:</label></td>
			        <td><input type="text" id="input_bcn_name" value="" /></td>
			      </tr>
			      <tr>
			        <td><label for="input_bcn_description">Description:</label></td>
			        <td><textarea type="text" id="input_bcn_description" value="" /></td>
			      </tr>
			    </table>
			    <table>
			    	<!--Added LIs come here-->
			    	<tr id="addLiRow"><td><button onclick="addLI()">Add LI</button></td></tr>
					<tr><td><button onclick="saveBCN()">Save</button></td></tr>
				</table>
			</div>
			<!--
			<div id="tabs-3">
				<table>
			      <tr>
			        <td><label for="input_bcn_name_update">Name:</label></td>
			        <td><input type="text" id="input_bcn_name_update" value=""  /></td>
			      </tr>
			      <tr>
			        <td><label for="input_bcn_description_update">Description:</label></td>
			        <td><textarea type="text" id="input_bcn_description_update" value="" /></td>
			      </tr>
			    </table>
			    <table>
			    	<tr id="addLiRowUpdate"><td><button onclick="addLIUpdate()">Add LI</button></td></tr>
					<tr><td><button id="updateButton" value="" onclick="updateBCN()" >Update</button></td></tr>
				</table>
			</div>
			-->
		</div>
	]]>
  </Content>
</Module>