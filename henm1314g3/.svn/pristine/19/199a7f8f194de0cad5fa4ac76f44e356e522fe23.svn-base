<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    
    <ModulePrefs title="Employees Graph"
		description="Shows graphs."
		author="Team Boost"
		author_email="henm1314g3@dbis.rwth-aachen.de"
		height="400">
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp"                     
		    xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/" 
		    openapp:service="http://purl.org/role/terms/spaceService"
		    openapp:permitReadAppend="http://purl.org/role/terms/data">
			
		    <Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
    </ModulePrefs>
    
    <Content type="html">
    <![CDATA[
		<!-- We use jQuery to manipulate DOM and jQuery-UI for the interface. -->
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js" type="text/javascript"></script>
		<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" type="text/javascript"></script>
		<script src="http://127.0.0.1:8073/role/henm1314g3/js/EmployeeManager.js" type="text/javascript"></script>
		<script src="http://127.0.0.1:8073/role/henm1314g3/js/BCNManager.js" type="text/javascript"></script>
		
		<script src="http://code.highcharts.com/highcharts.js" type="text/javascript"></script>
		<script src="http://code.highcharts.com/modules/exporting.js" type="text/javascript"></script>
		<!-- <script src="http://127.0.0.1:8073/role/henm1314g3/js/graph-highcharts.js" type="text/javascript"></script> -->


		<!-- Define CSS -->
		<link rel="stylesheet" type="text/css" href="http://127.0.0.1:8073/role/henm1314g3/css/stylesheet-graph.css">	
		
		<!-- JavaScript Block -->
		<script>
			var tabTemplate;
			var tabContentTemplate;
			var tabs;
			$(function() {
				tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close' role='presentation'>Remove Tab</span></li>";
			});
		
			var space;
			var employees;
			var bcns;

			gadgets.util.registerOnLoadHandler(init);
			function init(){	
				document.getElementById('btn').style.visibility='hidden';
				console.log("Widget 'Graph Visualization' loaded");	
				space = new openapp.oo.Resource(openapp.param.space());
				
				setUp( function(){
					renderAllBcns();
					renderAllEmployees();
					renderMainTable();
				});
			}
			
			function setUp(callback){
				retrieveAllBcns(space, function(bcnsList){
					bcns=bcnsList;
					bcns.sort(function(a, b){if(a.name < b.name) return -1; else return 1;});
					if(bcns.length==0){
						$("#bcnTable").empty();
						$("#bcnTable").append("<tr><td>No goals defined.</td></tr>");
					}
					
					retrieveAllEmployees(space, function(employeesList){
					employees=employeesList;
					employees.sort(function(a, b){if(a.name < b.name) return -1; else return 1;});
					if(employees.length==0){
						$("#employeeTable").empty();
						$("#employeeTable").append("<tr><td>No employees registered.</td></tr>");
					}
					if(employees.length==0 || bcns.length==0){
						$("#mainTable").empty();
						$("#mainTable").append("<tr><td>You need both employees and goals defined.</td></tr>");
					}
					callback();
					});				
				});
			}
			
			function renderAllBcns(){
				$("#bcnTable").empty();
				var tbl  = document.getElementById("bcnTable");
				for (var i=0; i<bcns.length; i++){
					var tr = tbl.insertRow();
					var td1 = tr.insertCell();
					td1.appendChild(document.createTextNode(bcns[i].name));
					var td2 = tr.insertCell();
						var btn=document.createElement("Button");
						btn.appendChild(document.createTextNode("Show Graph"));
						btn.bcn=i;
						if (btn.addEventListener)
							btn.addEventListener("click", showBcnGraph, false);
						else if (btn.attachEvent)
							btn.attachEvent('onclick', showBcnGraph);
					td2.appendChild(btn);
				}
			}
			
			function renderAllEmployees(){
				$("#employeeTable").empty();
				var tbl  = document.getElementById("employeeTable");
				for (var i=0; i<employees.length; i++){
					var tr = tbl.insertRow();
					var td1 = tr.insertCell();
					td1.appendChild(document.createTextNode(employees[i].name));
					var td2 = tr.insertCell();
						var btn=document.createElement("Button");
						btn.appendChild(document.createTextNode("Show Graph"));employees
						btn.employee=i;
						if (btn.addEventListener)
							btn.addEventListener("click", showEmployeeGraph, false);
						else if (btn.attachEvent)
							btn.attachEvent('onclick', showEmployeeGraph);
					td2.appendChild(btn);
				}
			}
			
			function renderMainTable(){				
				$("#mainTable").empty();
				var tbl  = document.getElementById("mainTable");
				for(var i=0; i<=employees.length; i++){
					var tr = tbl.insertRow();
					for(var j=0; j<=bcns.length ; j++){
						var td = tr.insertCell();
						if(i==0 && j!=0){
							td.appendChild(document.createTextNode(bcns[j-1].name));
						}
						else if(i!=0 && j==0){
							td.appendChild(document.createTextNode(employees[i-1].name));
						}
						else if (i!=0 && j!=0){
							if (employees[i-1].learningLevels[bcns[j-1].uri].isRelevant){
								var btn=document.createElement("Button");
								btn.appendChild(document.createTextNode("Show Graph"));
								btn.employee=i-1;
								btn.bcn=j-1;
								if (btn.addEventListener)
									btn.addEventListener("click", showMixGraph, false);
								else if (btn.attachEvent)
									btn.attachEvent('onclick', showMixGraph);
								
								td.appendChild(btn);
							}
						}
					}
				}
			}
			
			function showBcnGraph(evt){
				var bcn = bcns[evt.target.bcn];
				var liNameList=[];
				var liStartListAvg=[];
				var liCurrentListAvg=[];
				var liEndListAvg=[];
				for(var j = 0; j<bcn.learningIndicators.length; j++){
					var liStartList=[];
					var liCurrentList=[];
					var liEndList=[];
					for(i=0; i<employees.length; i++){
						var employee = employees[i];
						var li = bcn.learningIndicators[j];
						var start = employee.learningLevels[bcn.uri][li.id].start;
						var current = employee.learningLevels[bcn.uri][li.id].current;
						var end = employee.learningLevels[bcn.uri][li.id].end;
						if(i==0)
							liNameList.push(li.name);
						if (employee.learningLevels[bcn.uri].isRelevant){
							liStartList.push(start);
							liCurrentList.push(current);
							liEndList.push(end);
						}
						else{
							liStartList.push(0);
							liCurrentList.push(0);
							liEndList.push(0);
						}
					}
					var sumStart = liStartList.reduce(function(a, b) { return a + b });
					var sumCurrent = liCurrentList.reduce(function(a, b) { return a + b });
					var sumEnd = liEndList.reduce(function(a, b) { return a + b });
					liStartListAvg.push(sumStart / liStartList.length+1);
					liCurrentListAvg.push(sumCurrent / liCurrentList.length+1);
					liEndListAvg.push(sumEnd / liEndList.length+1);
				}
				var learningLevelsName = ["None"];
				for (var i=0; i<llevel.length; i++)
					learningLevelsName.push(llevel[i]);
				$('#container').highcharts({
					chart: {
						type: 'column'
					},
					title: {
						text: 'Goal: '+bcn.name+''
					},
					subtitle: {
						text: 'Average for every employee'
					},
					xAxis: {
						categories: liNameList
					},
					yAxis: {
						endOnTick: false,
						categories: learningLevelsName,
						title: {
							text: 'Learning Levels'
						}
					},
					tooltip: {
						headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
						pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
							'<td style="padding:0"><b>{point.y}</b></td></tr>',
						footerFormat: '</table>',
						shared: true,
						useHTML: true
					},
					plotOptions: {
						column: {
							pointPadding: 0.2,
							borderWidth: 0
						}
					},
					series: [{
						name: 'Current',
						data: liStartListAvg

					},
					{
						name: 'End',
						data: liEndListAvg

					}]
				});
				document.getElementById('btn').style.visibility='visible';
			}
			
			function showEmployeeGraph(evt){
				var employee = employees[evt.target.employee];
				var liNameList=[];
				var liStartListAvg=[];
				var liCurrentListAvg=[];
				var liEndListAvg=[];
				for(i=0; i<bcns.length; i++){
					var bcn = bcns[i];
					var liStartList=[];
					var liCurrentList=[];
					var liEndList=[];
					for(var j = 0; j<bcn.learningIndicators.length; j++){
						var li = bcn.learningIndicators[j];
						var start = employee.learningLevels[bcn.uri][li.id].start;
						var current = employee.learningLevels[bcn.uri][li.id].current;
						var end = employee.learningLevels[bcn.uri][li.id].end;
						if (employee.learningLevels[bcn.uri].isRelevant){
							liStartList.push(start);
							liCurrentList.push(current);
							liEndList.push(end);
						}
						else{
							liStartList.push(0);
							liCurrentList.push(0);
							liEndList.push(0);
						}
					}
					liNameList.push(bcn.name);
					var sumStart = liStartList.reduce(function(a, b) { return a + b });
					var sumCurrent = liCurrentList.reduce(function(a, b) { return a + b });
					var sumEnd = liEndList.reduce(function(a, b) { return a + b });
					liStartListAvg.push(sumStart / liStartList.length+1);
					liCurrentListAvg.push(sumCurrent / liCurrentList.length+1);
					liEndListAvg.push(sumEnd / liEndList.length+1);
				}
				var learningLevelsName = ["None"];
				for (var i=0; i<llevel.length; i++)
					learningLevelsName.push(llevel[i]);
				$('#container').highcharts({
					chart: {
						type: 'column'
					},
					title: {
						text: 'Employee: '+employee.name+''
					},
					subtitle: {
						text: 'Average for every goal'
					},
					xAxis: {
						categories: liNameList
					},
					yAxis: {
						endOnTick: false,
						categories: learningLevelsName,
						title: {
							text: 'Learning Levels'
						}
					},
					tooltip: {
						headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
						pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
							'<td style="padding:0"><b>{point.y}</b></td></tr>',
						footerFormat: '</table>',
						shared: true,
						useHTML: true
					},
					plotOptions: {
						column: {
							pointPadding: 0.2,
							borderWidth: 0
						}
					},
					series: [{
						name: 'Current',
						data: liStartListAvg

					}, {
						name: 'End',
						data: liEndListAvg

					}]
				});
				document.getElementById('btn').style.visibility='visible';
			}
			
			function showMixGraph(evt){
				var employee = employees[evt.target.employee];
				var bcn = bcns[evt.target.bcn];
				var liStartList=[];
				var liCurrentList=[];
				var liEndList=[];
				var liNameList=[];
				for(var j = 0; j<bcn.learningIndicators.length; j++){
					var li = bcn.learningIndicators[j];
					var start = employee.learningLevels[bcn.uri][li.id].start;
					var current = employee.learningLevels[bcn.uri][li.id].current;
					var end = employee.learningLevels[bcn.uri][li.id].end;
					liNameList.push(li.name);
					liStartList.push(start+1);
					liCurrentList.push(current+1);
					liEndList.push(end+1);
				}
				var list = liStartList.concat(liCurrentList, liEndList);
				var learningLevelsName = ["None"];
				for (var i=0; i<llevel.length; i++)
					learningLevelsName.push(llevel[i]);
					 $('#container').highcharts({
						chart: {
							type: 'column'
						},
						title: {
							text: 'Goal: '+bcn.name+''
						},
						subtitle: {
							text: 'Employee: '+employee.name+''
						},
						xAxis: {
							categories: liNameList
						},
						yAxis: {
							endOnTick: false,
							categories: learningLevelsName,
							title: {
								text: 'Learning Levels'
							}
						},
						tooltip: {
							headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
							pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
								'<td style="padding:0"><b>{point.y}</b></td></tr>',
							footerFormat: '</table>',
							shared: true,
							useHTML: true
						},
						plotOptions: {
							column: {
								pointPadding: 0.2,
								borderWidth: 0
							}
						},
						series: [{
							name: 'Current',
							data: liStartList

						}, {
							name: 'End',
							data: liEndList

						}]
					});
					document.getElementById('btn').style.visibility='visible';
			}
			
			function goBack(){
				document.getElementById('container').innerHTML='<table id="bcnTable"><tr><td>Loading...</td></tr></table><p></p><table id="employeeTable"><tr><td>Loading...</td></tr></table><p></p><table id="mainTable"><tr><td>Loading...</td></tr></table>';
				$("#bcnTable").empty();
				$("#employeeTable").empty();
				$("#mainTable").empty();
				document.getElementById('btn').style.visibility='hidden';
				init();
			}
		</script>
		
		<!-- HTML Block -->

		<div id="tabs">
			<div id="tabs-1">
				<div id="wrap" style="">
					<button id="btn" onclick="goBack()" style="visibility='hidden'">Go Back</button>
					<div id="container" style="min-width: 310px; height: 330px; margin: 0 auto overflow:scroll">
						<table id="bcnTable">
							<tr><td>Loading...</td></tr>
						</table>	
						<p></p>	
						<table id="employeeTable">
							<tr><td>Loading...</td></tr>
						</table>
						<p></p>	
						<table id="mainTable">
							<tr><td>Loading...</td></tr>
						</table>
					</div>
				</div>
			</div>
		</div>
		]]>
  </Content>
</Module>